/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util"
import Ajv = require("ajv")
import TypicodeTodoResponse from "./TypicodeTodoResponse"
export const ajv = new Ajv({
	allErrors: true,
	coerceTypes: false,
	format: "fast",
	nullable: true,
	unicode: true,
	uniqueItems: true,
	useDefaults: true,
})

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"))

export { TypicodeTodoResponse }
export const TypicodeTodoResponseSchema = {
	$schema: "http://json-schema.org/draft-07/schema#",
	defaultProperties: [],
	properties: {
		completed: {
			type: "boolean",
		},
		id: {
			type: "number",
		},
		title: {
			type: "string",
		},
		userId: {
			type: "number",
		},
	},
	required: ["completed", "id", "title", "userId"],
	type: "object",
}
export type ValidateFunction<T> = ((data: unknown) => data is T) &
	Pick<Ajv.ValidateFunction, "errors">
export const isTypicodeTodoResponse = ajv.compile(
	TypicodeTodoResponseSchema,
) as ValidateFunction<TypicodeTodoResponse>
export default function validate(value: unknown): TypicodeTodoResponse {
	if (isTypicodeTodoResponse(value)) {
		return value
	} else {
		throw new Error(
			ajv.errorsText(
				isTypicodeTodoResponse.errors!.filter((e: any) => e.keyword !== "if"),
				{ dataVar: "TypicodeTodoResponse" },
			) +
				"\n\n" +
				inspect(value),
		)
	}
}
